diff --git a/node_modules/@react-native-mapbox-gl/maps/ios/RCTMGL/RCTMGLLocationManager.m b/node_modules/@react-native-mapbox-gl/maps/ios/RCTMGL/RCTMGLLocationManager.m
index c68a1f4..97a93d8 100644
--- a/node_modules/@react-native-mapbox-gl/maps/ios/RCTMGL/RCTMGLLocationManager.m
+++ b/node_modules/@react-native-mapbox-gl/maps/ios/RCTMGL/RCTMGLLocationManager.m
@@ -56,7 +56,17 @@ - (void)start:(CLLocationDistance)minDisplacement
     }
 
     dispatch_async(dispatch_get_main_queue(), ^{
-        [self->locationManager requestWhenInUseAuthorization];
+        
+        if (@available(iOS 13, *)) {
+            // When on iOS 13 or above, we request always as otherwise the permission
+            // given will not allow background tracking, and we cannot explicitly request
+            // the elevated permission later on.
+            [self->locationManager requestAlwaysAuthorization];
+        } else {
+            // On iOS 12 and below, we can request when in use first. We'll then request
+            // always authorization when required later on.
+            [self->locationManager requestWhenInUseAuthorization];
+        }        
         [self->locationManager startUpdatingLocation];
         [self->locationManager startUpdatingHeading];
         [self->locationManager setDistanceFilter:(minDisplacement)];
diff --git a/node_modules/@react-native-mapbox-gl/maps/ios/RCTMGL/RCTMGLStyle.m b/node_modules/@react-native-mapbox-gl/maps/ios/RCTMGL/RCTMGLStyle.m
index 6723bac..c3848e0 100644
--- a/node_modules/@react-native-mapbox-gl/maps/ios/RCTMGL/RCTMGLStyle.m
+++ b/node_modules/@react-native-mapbox-gl/maps/ios/RCTMGL/RCTMGLStyle.m
@@ -208,11 +208,14 @@ - (void)symbolLayer:(MGLSymbolStyleLayer *)layer withReactStyle:(NSDictionary *)
       } else {
         NSString *imageURI = [styleValue getImageURI];
 
+        // Weakly reference style to fix race-condition issues
+        __weak MGLStyle *weakStyle = self->_style;
+
         [RCTMGLUtils fetchImage:_bridge url:imageURI scale:[styleValue getImageScale] callback:^(NSError *error, UIImage *image) {
           if (image != nil) {
             dispatch_async(dispatch_get_main_queue(), ^{
               if (isValid()) {
-                [self->_style setImage:image forName:imageURI];
+                [weakStyle setImage:image forName:imageURI];
                 [self setIconImage:layer withReactStyleValue:styleValue];
               }
             });
